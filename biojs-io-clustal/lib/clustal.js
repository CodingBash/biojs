// Generated by CoffeeScript 1.7.1
var Clustal, GenericReader, Seq, Str,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Str = require("./strings");

GenericReader = require("./generic_reader");

Seq = require("./seq");

module.exports = Clustal = (function(_super) {
  __extends(Clustal, _super);

  function Clustal() {
    return Clustal.__super__.constructor.apply(this, arguments);
  }

  Clustal.parse = function(text) {
    var blockstate, k, label, line, lines, match, regex, seqCounter, seqs, sequence;
    seqs = [];
    lines = text.split("\n");
    if (lines[0].slice(0, 6) === !"CLUSTAL") {
      throw new Error("Invalid CLUSTAL Header");
    }
    k = 0;
    blockstate = 1;
    seqCounter = 0;
    while (k < lines.length) {
      k++;
      line = lines[k];
      if ((line == null) || line.length === 0) {
        blockstate = 1;
        continue;
      }
      if (line.trim().length === 0) {
        blockstate = 1;
        continue;
      } else {
        if (Str.contains(line, "*")) {
          continue;
        }
        if (blockstate === 1) {
          seqCounter = 0;
          blockstate = 0;
        }
        regex = /^(?:\s*)(\S+)(?:\s+)(\S+)(?:\s*)(\d*)(?:\s*|$)/g;
        match = regex.exec(line);
        if (match != null) {
          label = match[1];
          sequence = match[2];
          if (seqCounter >= seqs.length) {
            seqs.push(new Seq(sequence, label, seqCounter));
          } else {
            seqs[seqCounter].seq += sequence;
          }
          seqCounter++;
        } else {
          console.log(line);
        }
      }
    }
    return seqs;
  };

  return Clustal;

})(GenericReader);
